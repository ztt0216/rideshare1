@startuml Inheritance_Pattern_Implementation

title <size:16><b>Inheritance Pattern - User Hierarchy Implementation</b></size>

package "Domain Classes (Object-Oriented)" {
    abstract class User {
        -long userId
        -String name
        -String email
        -String password
        -Role role
        -Wallet wallet
        +User()
        +User(long, String, String, String, Role, Wallet)
        +getUserId(): long
        +setUserId(long): void
        +getName(): String
        +setName(String): void
        +getEmail(): String
        +setEmail(String): void
        +getPassword(): String
        +setPassword(String): void
        +getRole(): Role
        +setRole(Role): void
        +getWallet(): Wallet
        +setWallet(Wallet): void
    }

    class Rider {
        -List<Ride> rideHistory
        +Rider()
        +Rider(long, String, String, String, Wallet, List<Ride>)
        +getRideHistory(): List<Ride>
        +setRideHistory(List<Ride>): void
        +requestRide(int, int): Ride
    }

    class Driver {
        -List<Availability> availabilitySchedule
        -List<Ride> driveHistory
        +Driver()
        +Driver(long, String, String, String, Wallet, List<Availability>, List<Ride>)
        +getAvailabilitySchedule(): List<Availability>
        +setAvailabilitySchedule(List<Availability>): void
        +getDriveHistory(): List<Ride>
        +setDriveHistory(List<Ride>): void
        +acceptRide(long): boolean
        +updateAvailability(List<Availability>): void
    }

    enum Role {
        RIDER
        DRIVER
    }
}

package "Database Schema (Relational)" {
    entity "users" {
        * id : BIGSERIAL PRIMARY KEY
        --
        * name : VARCHAR NOT NULL
        * email : VARCHAR UNIQUE NOT NULL
        * password_hash : VARCHAR NOT NULL
        * role : VARCHAR NOT NULL ('RIDER' or 'DRIVER')
    }
}

' Inheritance relationships in domain model
User <|-- Rider : "extends"
User <|-- Driver : "extends"
User --> Role : "has"

' Mapping to single table
User ||--|| users : "mapped to single table"
Rider ||--|| users : "role = 'RIDER'"
Driver ||--|| users : "role = 'DRIVER'"

note top of User : **Abstract Base Class**\nDefines common attributes\nand behavior for all users

note left of Rider : **Concrete Subclass**\nSpecializes User for\nride requesting behavior\nrole = 'RIDER'

note right of Driver : **Concrete Subclass**\nSpecializes User for\nride providing behavior\nrole = 'DRIVER'

note bottom of users : **Single Table Inheritance**\nAll user types stored in one table\nDiscriminated by 'role' column

note as PatternNote
**Pattern Implementation:**
• Single Table Inheritance pattern
• Abstract User class with concrete subclasses
• Role discriminator column in database
• Common attributes stored in users table
• Subclass-specific attributes handled separately
end note

@enduml
