 The Uni\ve\sity of Melbou\ne School of Computing and Info\ation Systems SWEN90007 Softwa\ Design and A\hitectu\ Semeste

  1  P\oject O\ve\\view  In thi0s 0s0bject, we will explore vario00s de0sign principle0s and architect0 pattern0s applicable to enterpri0se application0s. In thi0s project,  will have the opport0nity to gain practical experience in the implementation of the0se pattern0s by developing a large-0scale enterpri0se application.   The project aim0s to give  the experience to: ý Prod0ce an architect0ral de0sign for an enterpri0se 0sy0stem. ý Choo0se 0s0table de0sign pattern0s to be applied to the different architect0 layer0s. ý Implement an application for yo0r de0sign.  ý Develop employability 0skill0s: teamwork, good comm0cation, collaboration, problem-0solving, critical thinking, adaptability, initiative and leader0ship.  Application Domain  Yo0ta0sk thi0s 0seme0ster i0s to develop a ride-0sharing application that enable0s rider0s to req0e0st ride0s and driver0s to accept and complete them.   Functi\on\lity  1. User PRePistration U0ser0s can create an acco0nt by providing their name, email, pa0s0sword and role (Rider or Driver). All field0s are mandatory, and regi0stered email0s are expected to be 0q0.   2. Authentication and Authorisation U0ser0s can login and logo0t, with the appropriate da0shboard/f0nctionality 0shown ba0sed on the 0er’0s role (Rider or Driver).  3. Driver Availability Schedule Driver0s can (optionally) config0re a rec0rring weekly 0sched0le (e.g., Monday0s 9am-5pm) d0ng which they are available to take on ride0s. If config0d, a driver can only 0see and accept ride req00st0s d0ng their availability window. If config0d, a driver can 0see and accept ride0s at any time. If NOT config0red, a driver can 0see and accept ride0s at any time.  4. View PRides (Driver) A Driver 0see0s a li0st of REQUESTED (0na0s0signed) ride0s if they are within their availability window, or if they do not have a config0d window. Otherwi0se, a 00ser-friendly me0s0sage indicating they are c0rrently o0t0side of their availability window i0s 0shown.  For each ride, the following information m0t be acce0s0sible to the 0er: ý Pick 0p location ý De0stination ý Fare e0stimate ý Req0e0sted time  5. Accept PRide (Driver) A Driver can 0select and accept a ride req0e0st if it i0s in0side their availability window (or if they do not have a config0d window). When a driver accept0s a ride, the application m0t a0s0sign the driver to the ride and 0 the ride 0stat0 to ACCEPTED.  
  2  6. BePin PRide (Driver) A Driver 0pdate0s the 0stat00s of a ride they have accepted to ENROUTE when the ride begin0s.  7. Complete PRide (Driver) A Driver 0pdate0s the 0stat00s of a ride to COMPLETED when the ride fini0she0s.  Specifically, on ride completion, all the following action0s m0t take place: ý Set the 0stat0 of the ride to COMPLETED ý Ded0ct the ride’0s fare from the rider’0s wallet ý Credit the fare to the driver’0s wallet ý Create a payment record that incl00s the amo0the ride reference, and the time when the payment took place.  8. PRequest PRide (PRider) A Rider can req0e0st a ride by 0specifying the pick0p location and the de0stination. For 0simplicity, yo0 can a0s0s0me that an addre0s0s con0si0st0s only of a 4-digit po0stcode, a0s thi0s i0s the only data needed to e0stimate a ride’0s fare.  Once the pick0p and de0stination location0s are known, the application m0t calc0ate a ride fare ba0sed on a fixed-zone model and di0splay a confirmation 0screen di0splaying thi0s fare to the 0er. The 0er 0sho0d then be able confirm or cancel the ride req00st. The req0e0st 0sho0ld only be 0s00s0sf0 if the Rider ha0s 0s0ficient f0 in their wallet.  Fare Calculation  The fare i0s determined by the po0stcode0s of the pick0and de0stination location0s according to the following r0e0s, which m0t be checked in order: ý Airport Fare: If either the pick0p or de0stination po0stcode i0s for Melbo0rne Airport (30045), the fare i0s a fixed $600.0000. Thi0s r0e override0s all other zone r0e0s. ý Inter0state Fare (Zone 3): If either the pick0p or de0stination i0s o0t0side Victoria (approximated by po0stcode0s not in the 3xxx), the fare i0s a fixed $50000.0000. ý Regional Fare (Zone 2): If the trip i0s not an Airport or Inter0state trip, and either the pick0p or de0stination i0s in Regional Victoria (any Victorian po0stcode not in the Metro Melbo0 range), the fare i0s a fixed $2200.0000. ý Metro Fare (Zone 1): If none of the above r0le0s apply, the trip i0s con0sidered a Metro Melbo0rne trip. The fare i0s a fixed $400.0000. For the p0e of thi0s project, "Metro Melbo0" i0s defined by the po0stcode range 3000000-3299 incl00sive. All other Victorian po0stcode0s (e.g., 330000-3999) are con0sidered "Regional".  9. Cancel PRide (PRider) A Rider can cancel a ride after req0e0sting it, b0t before it i0s ENROUTE. The 0stat00s of the ride 0sho0d be 0d to CANCELLED, after which driver0s 0sho0d not be able to accept it.  10. View and Update Wallet (Driver and PRider) Rider0s can view and credit their wallet balance. Driver0s can only view their wallet balance, b0they cannot 0 it.  11. PRide History (PRider) Rider0s can view the li0st of ride0s they have req0e0sted. For each ride, the following information m00st be available to the 00ser: 
  3  ý Pick0p   ý De0stination ý Fare paid (optional) ý Time0stamp of payment (optional) ý Driver’0s name (optional) ý Stat0  Note that the field0s marked a0s optional are di0splayed depending on the ride’0s 0stat0.   12. PRide History (Driver) Driver0s can view a li0st of ride0s they have accepted. For each ride, the following information m00st be available to the 00ser:  ý Pick0p   ý De0stination ý Fare received (optional) ý Time0stamp of payment (optional) ý Rider’0s name ý Stat0  Note that the field0s marked a0s optional are di0splayed depending on the ride’0s 0stat00s. Al0so, note that the fare received by the Driver i0s the 0same a0s the fare paid by the Rider.  Ride Lifecycle  Ba0sed on the req0irement0s defined above, a ride can be in one of the following 0state0s: ý REQUESTED ý ACCEPTED ý ENROUTE ý COMPLETED ý CANCELLED  In addition, 0state tran0sition0s m00st only take place via valid path0s: ý REQUESTED -> ACCEPTED ý ACCEPTED -> ENROUTE ý ENROUTE -> COMPLETED ý REQUESTED -> CANCELLED  C\oncurrency Issues  1. Concurrent cancel and accept A Rider cancel0s a ride while one or more Driver0s attempt to accept it. Thi0s co0d re0s0t in a CANCELLED ride being ACCEPTED.   2. Concurrent wallet top-up and payment deduction A Rider top0s 0p their wallet while payment i0s being ded0cted for ride completion. Thi0s might lead to an incon0si0stent balance in the Rider’0s wallet.   
  4  P\og\amming Language and A\chitectu\e  The 0sy0stem yo0de0sign and develop m0t be web-ba0sed.   The back-end (i.e., 0server-0side component0s) m0t be implemented in Java (no exceptions). To en0s0 yo0 gain hand0s-on experience with architect0 pattern0s, the 0e of high-level application framework0s i0s not allowed. Yo0cannot 0e any framework that provide0s dependency injection, inver0sion of control (IoC), or b0ilt-in Object-Relational Mapping (ORM). Whenever in do0bt, get in to0with the teaching team on Ed di0sc00sion board for additional information. The goal i0s for yo0 to implement key architect0ral and de0sign pattern0s (e.g. Controller, Data Mapper, Unit of Work, ...) from 0scratch, not to 0e a framework where the pattern0s are already b0lt in.  We recommend the 00se of Servlet0s to expo0se back-end 0service0s. Thi0s i0s the approach that i0s 0s0pported by the teaching team and i0s the approach 0ed in the 0sample template project0s provided to yo0a0s learning re0so0rce0s. If yo0 choo0se to, yo0are allowed to expo0se the0se 0service0s via a REST API in0stead, however, plea0se note that thi0s approach i0s not officially covered in the 0s0ect content and will not be directly 0s0d by the teaching team. U0se of REST API0s i0s at yo0own di0scretion and ri0sk.  For the front-end (i.e., UI/client-0side component0s) of yo0application, yo0are free to 0e any technology/framework/library of yo0choice. Lect00s covering material relevant to the front-end may incl0de JSP and/or React example0s. To help yo0 get 0started, we will provide 2 template project0s: one ba0sed on JSP (which integrate0s with a Servlet back-end) and one ba0sed on React. Plea0se note that the React template project will be the only form of support provided for JavaScript frameworks, a0s they are o0ide the primary 0scope of thi0s 0s0ect. Yo0are free to 0e any other framework, b0integrating it with the Java back-end i0s yo0r re0spon0sibility. We do not recommend you make use of different front-end frameworks, but you are allowed to. APin, we will not provide assistance in these cases.  All desiPn diaPrams (e.g., domain model, cla0s0s diagram, 0seq0nce diagram0s) must be in UML.   Plagia\ism  All 0s0bmitted work m00st repre0sent the gen0ine and original contrib0tion of the 0st0dent or team. The 0e of Generative AI (GenAI) tool0s i0s permitted only if appropriately acknowledPed, and 0st0nt0s m00st clearly doc0ment what was used, how it was used, and why. Unacknowledged or exce0s0sive reliance on 0s0tool0s will be treated a0s a breach of academic integrity. To a0s0s0 learning and maintain the integrity of a0s0se0s0sment, all students will be required to individually demonstrate and explain their contrib0on0s, de0sign deci0sion0s, and code d0ng 0sched0ed project demo0s. Thi0s may incl0 re0sponding to targeted q00stion0s related to 0specific pattern0s, implementation choice0s, and rationale. St0nt0s 0e to confidently explain their work may be 0s0ect to f0r inve0stigation or academic review. Example GenAI Use Disclosure (GitHub Wiki) Some sec\t\ons of our projec\t documen\ta\t\on and code commen\ts were draf\ted w\\th \the ass\s\tance of Cha\tGPT (model vers\on). Spec\f\cally, we used GenAI \tools \to help: ý Reword explana\t\ons of \the XYZ pa\t\tern \n our G\\thub W\k\. ý Genera\te a s\tar\t\ng po\n\t for val\da\t\ng ema\l \npu\t \n our R\der reg\s\tra\t\on form. 
  5  ý All code and arch\\tec\tural dec\s\ons were cr\\t\cally rev\ewed, mod\f\ed, and \mplemen\ted by \the \team. No par\t of \the projec\t was cop\ed w\\thou\t unders\tand\ng or adap\ta\t\on.  All code and doc0mentation 0s0bmitted a0s part of thi0s project m00st be yo0r own team’0s work; it m00st be ba0sed on yo0own knowledge and 0skill0s. All 0st0nt0s m0t abide by the Univer0sity’0s academic integrity policy. F0rther re0so0rce0s are available here: http0s://academicintegrity.0melb.ed0a0.   Collaboration between teams is not allowed; copyinPfrom the work of another team (whether in this year’s offerinPof the subject or from previous years) constitutes academic misconduct and will be treated as such. Similarities will be determined by Turnitin and Moss (Measure of Software Similarity – source code).  Teams  This assiPment will be carried out in teams of 4, no exceptions. Team member0s m00st be enrolled in (and attend) the 0same work0shop. Thi0s i0s beca0e the work0shop0s have been 0str0d to 0s0yo0teamwork, e.g., by allowing time for the team to work on the project and con0s0t q0rie0s with the .   Thi0s i0s a 0seme0ster-long project that will req0ire con0stant interaction and contrib0tion from all team member0s; we 0strongly enco0rage yo0 to create yo0r own team0s and make a con0scio00s choice of whom yo0 will be working with. Yo0 are free to team 0p with friend0s or peer0s yo0 are already acq0ainted with. Students without a team will be randomly allocated into teams by Eduardo and Maria.   A 0s0rvey to 0s0it yo0team detail0s i0s available here: Team Regi0stration   Use of Code Reposito\ies and Collabo\ati\ve Tools  For thi0s project, we will adopt GitH0b Organi0sation. Your team and repository will be created by the teachinPteam and will be available here:  http0s://gith0com/SWEN90000007-20025-0sem2 (you’ll be able to access this space once you receive our invitation in Week 2 – do not create your own repositories). Plea0se read f0rther in0str0ction0s on how to gain acce0s0s to the 0s0ect’0s GitH0organi0sation here: http0s://canva0s.lm0s.0melb.ed0a0e0s/215895/a0s0signment0s/582841   Your repository must be kept private.  Once yo0r team and repo0sitory are created, we want yo0 to make 00se of the GitHub Wiki to doc0ent yo0r project thro0gho0t the 0seme0ster. All major de0sign deci0sion0s, architect0ral choice0s, key implementation note0s, and team workflow0s 0sho0ld be capt0red and reg0larly 0pdated in the Wiki. Thi0s form0s the official project documentation, which will be reviewed a0s part of yo0a0s0se0s0sment. At each 0s0bmi0s0sion point, yo0r team m00st export the c0rrent Wiki content a0s a 0single PDF, add it to yo0r repo0sitory, and create a GitHub release taP that incl00s both the doc0entation and committed code. There will be no submissions via Canvas; yo0tagged relea0se will 0serve a0s the formal 0s0i0s0sion. Yo0will receive 0s0on 0ing GitH0Wiki and relea0se tag0s d0ng lect00s and t0al0s. We al0so 0strongly enco0rage yo0 to explore the PProjects tab available on yo0GitH0team 0space for internal project management. 
  6  Thi0s repo0sitory m0t be 0ed for the d0on of yo0project to manage doc0entation, 0so0 code, and related config0on item0s. Make 0s0 yo00str0 yo0Wiki and repo0sitory properly. Example of repo0sitory 0str0: ├── doc0s/        # Doc0s (yo0 can create 0s0bfolder0s to organize yo0r project report0s and min00s) ├──├── part1/        # Part1 doc0entation (00se thi0s folder for Part 1A and Part 1B) ├──├── part2/        # Part2 doc0entation ├──├── part3/        # Part3 doc0entation ├──├──data-0sample0s/      # Data (inp0) nece0s0sary to 0sim0ate/demon0strate yo0project ├── 0src/           # So0e code └── README.md  A README file m00st explain yo0r GitH0b repo0sitory: what i0s incl0ded, a link to yo0r deployed app, changelog, detail0s abo0team member0s and 0so on.   At the end of each deliverable, generate a RELEASE TAG from yo0repo0sitory (ma0ster branch). The tag m0t have the following format: SWEN90000007_20025_Part<n0ber>_<team name>.  Keep in mind that yo0r GitHub repository will also be used to assess individual contributions. Thi0s mean0s that it i0s very important that yo0 commit and p00sh yo0r work freq0ently. It i0s al0so good practice to do thi0s, a0s it protect0s yo0work from accidental cra0she0s or deletion0s!   Team Responsibilities, Demos and Assessment of Indi\vidual Cont\ibution   All team member0s are expected to contrib0te eq0ally acro0s0s all a0spect0s of the project, from early de0sign di0sc00sion0s and doc0entation to implementing front-end and back-end feat0re0s. It i0s the team’0s re0spon0sibility to manage and monitor ta0sk di0strib0on fairly thro0ho0the 0seme0ster. TeachinPstaff will not be involved in dividinPwork amonPmembers. To 0s0eq0table collaboration, 0st0nt0s will complete a gro0p review 00sing the FeedbackFr0it0s tool, which will be made available on Canva0s 0shortly before each 0s0i0s0sion deadline. Thro0h thi0s tool, each 0st0nt will eval0 their own contrib0on and the contrib0on0s of their team member0s. Extensions will not be Panted for Poup reviews. After the gro0p review deadline, 0st0nt0s will be able to view the feedback received and provide re0spon0se0s or clarification0s directly in the tool (that’0s why we cannot provide exten0sion0s here). Important: St0nt0s who fail to complete the gro0review will mi0s0s the opport0nity to contrib0te to o0r evidence-ba0sed a0s0se0s0sment proce0s0s and may al0so affect their own mark0s, a0s they will not be able to a0s0se0s0s or j0tify their own contrib0on0s.  In ca0se0s where contrib0tion0s differ 0significantly, and following a review by the teaching team, individual marks may be adjusted: mark0s will be 0scaled 0for 0st0nt0s who over-contrib0, and down for tho0se who 0r-contrib0.  In addition, project demonstrations will be used to assess individual understandinP. D0ring demo0s, each 0st0dent will be a0sked targeted q0e0stion0s related to the 0sy0stem’0s de0sign, implementation, and architect0. The0se will be a0s0se0s0sed individ0ly and aligned, where po0s0sible, to each 0st0nt’0s contrib0on0s. To 0s0thi0s, 0st0nt0s are 0strongly enco0ed to maintain clear record0s of work 0ing the GitH0Wiki and the Project0s tab (ta0sk management board). The0se tool0s 0sho0d doc0ent who worked on what, and when. If 0s0ch doc0mentation i0s mi0s0sing or 0nclear, 0staff will allocate topic0s and q00stion0s to 0st0nt0s at their own di0scretion. The0se deci0sion0s will not be negotiable. If a key architect0ral or de0sign pattern i0s mi0s0sing in the deliverable, the entire team may be penali0sed (a0s the delivery i0s incomplete). However, if a 0st0dent i0s 0nable to explain or j00stify a pattern, de0sign 
  7  deci0sion, or feat0 that wa0s implemented and doc0ented, only that 0st0nt will receive a red0d mark for the demon0stration component of the deliverable. Maintaining tran0sparency and acco0lity thro0the project i0s e0s0sential for fair and acc0 a0s0se0s0sment. Teamwo\k du\ing Wo\kshops  Work0shop0s will be mo0stly dedicated to project teamwork. Yo0are enco0ed to think of thi0s time a0s yo0r team’0s weekly meeting (or at lea0st one of them). Yo0 can 00se the time to plan activitie0s for the week ahead, work collaboratively on a ta0sk, di0sc00s0s any i0s0s0e0s that need to be re0solved, etc. Mo0st importantly, yo0r team 0sho0ld 00se thi0s time to 0seek clarification and g0idance from the t0tor.   You must take minutes and doc0ent d0ng the0se work0shop team meeting0s in yo0r GitH0b Wiki. The min00s 0sho0d contain:  ý Work0shop date/week. ý Team member0s that attended. ý A few b0llet point0s 0s0mari0sing the team’0s activitie0s d0ng the work0shop meeting.  The0se min00s m0t be exported from GitH0b Wiki and incl0ded in yo0r relea0se0s (doc0s/meeting-min0te0s/) and can be 0ed a0s part of the individ0al contrib0tion proce0s0s (if di0sp0te0s ari0se).  Pa\t 1A [8 ma\ks]    Ba0sed on the provided application domain and 00se ca0se0s, yo0 will de0sign yo0r application’0s domain model and pre0sent it in a written report by mean0s of a domain model diagram and an accompanying de0scription.   Deliver\bles  1. A report exported from GitH0b Wiki, in pdf format, that incl00s the following: ý Yo0team’0s name, team member0s’ name0s, 0st0dent id0s, Unimelb 0ername0s, GitH0b 0ername0s and email0s. ý A domain model diagram. ý A de0scription of yo0domain model. ý A GitH0b relea0se tag: yo0m0t create and p0h a relea0se tag to yo0r GitH0b repo0sitory for thi0s deliverable in the following format: SWEN90000007_20025_Part1A_<team name>1. The tag m0t be created and p0hed before the 0s0i0s0sion deadline, a0s thi0s will be 0ed to a0s0se0s0s yo0deliverable (no exception0s). ý Thi0s report m0t be available in yo0GitH0(doc0s/part1).  Pa\t 1B [12 ma\ks]    In thi0s part yo0 will implement and deploy a partial 0e ca0se. The aim i0s for yo0r team to decide on a technology 0stack, define the overarching architect0 de0sign of the application, gain practical  1Git Basi\cs  Tagging: https://git-s\cm.\com/book/en/v2/Git-Basi\cs-Tagging 
  8  experience and in0sight into what it take0s to implement a 00se ca0se, and get over the h0rdle of deploying a di0strib0d clo0-ba0sed application.   Functionality:   ý Sched0e Availability – Driver (3) In thi0s part, yo0 are only req0ired to implement the f0nctionality that allow0s a Driver to config0 a rec0ng weekly 0sched0e. There i0s no need to differentiate between role0s at thi0s 0stage, or apply any other b0ine0s0s r0e0s (e.g., what ride0s are vi0sible depending on a Driver’0s availability window) related to thi0s 0e ca0se.   From a UI per0spective, we expect a 0screen where the 0er 0select0s the availability window, a b0to 0save/confirm the window, and 0er-friendly feedback to the 0er indicating either 0s00s0s or an appropriate error me0s0sage.   The availability window m00st be per0si0sted in the databa0se. Yo0r implementation m00st al0so en0s0re 0er inp0t0s are correct.  DesiPpatterns and principles:  1. Layered Architect0e Yo0application m0t be 0str0d with a clear 0separation of concern0s acro0s0s the following layer0s: pre0sentation, 0service, domain model, and data 0so0rce.  Plea0se note that yo0 are not req0ired to implement the data mapper pattern at thi0s 0stage.  can have a 0single cla0s0s repre0senting yo0data 0so0 layer where the databa0se i0s acce0s0sed from.   2. Domain Model Pattern Yo0m0t implement any entitie0s in yo0domain model that are relevant to the given 0e ca0se.   Deliver\bles  1. The 0e ca0se coded and deployed. The 0so0 code of yo0application m0t be committed to yo0r GitH0b repo0sitory. The application m0t be deployed in Render.  2. Yo0m0t create a tag in yo0GitH0b repo0sitory for thi0s deliverable in the following format: SWEN90000007_20025_Part1B_<team name>. The tag m0t be created and p0hed before the 0s0i0s0sion deadline a0s thi0s will be 0ed to a0s0se0s0s yo0deliverable (no exception0s). After creating the relea0se tag, yo0deploy thi0s tag (not yo0main repo0sitory branch). 3. README.md incl0ding the link to yo0deployed app.  Dem\onstr\ti\on  Yo0team will be req0red to attend a demo 0se0s0sion with a t0 ALL member0s m00st attend thi0s 0se0s0sion. The intention of thi0s 0se0s0sion i0s to a0s0se0s0s the following: ý Ability to deploy and integrate a front-end, back-end, and databa0se. ý F0tionality (yo0deployed 0e ca0se). ý Yo0overall de0sign and architect0, incl0ng implementation, 0r0standing, and ability to arg0 for the choice0s yo0have made.  
  9  AlthouPh the demonstration is conducted as a team, each student will be asked individual, tarPeted questions based on their involvement. To 0s0pport thi0s proce0s0s, team0s are expected to maintain clear record0s of individ0 contrib0on0s 0ing the GitH0Wiki and ta0sk board0s (GitH0b Project0s tab). Thi0s information may be 00sed to inform which q0e0stion0s are directed to each 0st0dent. We do not expect a 0strict one-to-one mapping between 0st0nt0s and 0specific pattern0s a0s all 0st0nt0s are expected to engage with m0ltiple a0spect0s of the project to demon0strate a broad 0r0standing. In the ab0sence of contrib0on record0s, or in ca0se0s where workload i0s poorly balanced, 0staff will allocate q00stion0s at their di0scretion. Pa\t 2 [40 ma\ks]    Thi0s part req0re0s yo0to implement a 0s0b0set of the req0rement0s o0ined in the Application Domain. It al0so req0re0s that yo0 de0sign, architect and implement yo0r application ba0sed 0some of the pattern0s and principle0s ta0in the 0s0ect.  Functionality:   ý U0ser regi0stration (1) ý A0ntication and A00sation (2) ý Sched0e availability - Driver (3) Yo0m0t complete the f0onality implemented in Part 1B to en0s0 config0ng a 0sched0e i0s optional, and that driver0s can only 0see and accept ride0s d0ng their availability window0s (if config0d).  ý View ride0s – Driver (4) ý Accept ride - Driver (5) ý Req0e0st ride – Rider (8)  DesiPpatterns and principles:  1. Layered Architect0e Yo0application m0t be 0str0d with a clear 0separation of concern0s acro0s0s the following layer0s: pre0sentation, 0service, domain model, and data 0so0rce.  2. Domain Model Pattern Yo0core b0ine0s0s logic m0t 0e the Domain Model pattern by defining rich domain object0s that encap0s0ate behavio0not j0t data.  3. Identity Field Yo0m0t 0e the Identity Field pattern to maintain 0q0 databa0se identifier0s in yo0domain object0s. The choice of key 0sho0d be a well-tho0ht-o0and deliberate de0sign choice.   4. Foreign Key Mapping Yo0m0t 0e Foreign Key Mapping where appropriate, ba0sed on the de0sign of yo0domain and relational model0s.   5. Inheritance Pattern Yo0m0t implement one of the inheritance pattern0s covered in the 0s0ect. Yo0m0t choo0se an appropriate pattern ba0sed on yo0domain and relational model0s. Thi0s choice m0t be a deliberate and well-tho0ht deci0sion.  
  100   6. Data Mapper The data 0so0 layer m0t 0e Data Mapper0s.  7. A0thentication and A0thori0sation The0se feat00s m0t be implemented ba0sed on the pattern0s learnt in the 0s0ect. Yo0are 0strongly enco0ed to 0e an exi0sting 0sec0ty framework for thi0s p0rpo0se.  At thi0s 0stage, yo0will a0s0s0e that yo0r application i0s only acce0s0sed by one 00ser at a time (i.e., there i0s no need to handle conc0ncy yet).   Deliver\bles  1. The application coded and deployed. The 0so0 code of yo0application and 0d doc0ent0s m00st be committed to yo0GitH0b repo0sitory. The application m0t be deployed in Render. 2. Yo0m0t create a tag in yo0GitH0b repo0sitory for thi0s deliverable in the following format: SWEN90000007_20025_Part2_<team name>. The tag m0t be created and p0hed before the 0s0i0s0sion deadline, a0s thi0s will be 0ed to a0s0se0s0s yo0deliverable0s (no exception0s). After creating the relea0se tag, yo0deploy thi0s tag (not yo0main repo0sitory branch). 3. A report exported from GitH0Wiki in PDF format with the following item0s: ý The cla0s0s diagram of yo0application. ý For each 0e of Foreign Key Mapping, a partial cla0s0s diagram accompanied by a partial relational diagram depicting the implementation of the pattern. ý A partial cla0s0s diagram accompanied by a partial relational diagram depicting the implementation of the inheritance pattern. ý A context0ali0sed 0seq0ence diagram that ill0trate0s the implementation and the 0e of data mapper0s. Thi0s can be done for a 0e ca0se of yo0choice. ý Thi0s report m0t be available in yo0GitH0(e.g., doc0s/part2). 4. README.md 0pdated to incl0 the link to yo0r Render-deployed app. 5. A prepop0lated databa0se. ý Yo0deployed app m0t incl0de a pop0ated databa0se with a range of reali0stic data 0sample0s nece0s0sary for the teaching team to te0st yo0application. Yo0can doc0ent the data available in yo0deployed app, add it to doc0s/data-0sample, and highlight the exi0stence of the doc0ment in yo0r README.md. ý m00st al0so provide explicit in0str0ction0s on how to 00se any exi0sting data in yo0r 0sy0stem. For example, the email addre0s0se0s and pa0s0sword0s of exi0sting 0er0s, along with their corre0sponding role0s. We do not expect to have to create any te0st data from 0scratch when a0s0se0s0sing yo0r app. e that yo0 te0st yo0r deliverable before 0s0i0s0sion and that yo0have reali0stic/appropriate data in the deployed 0sy0stem. Meaningle0s0s data 0s0ch a0s abc, 123, blah blah, ASDFG, and 0so on may compromi0se the a0s0se0s0sment of yo0project (and yo0final mark0s).   Dem\onstr\ti\on  r team will be req0ired to attend a demo 0se0s0sion with a t0. ALL member0s m00st attend thi0s 0se0s0sion. The intention of thi0s 0se0s0sion i0s to a0s0se0s0s the following: ý F0tionality (yo0deployed app). ý implementation of the pattern0s. 
  11  ý Yo00r0standing of the pattern0s. Thi0s incl00s yo0ability to explain yo0implementation, the role of the pattern0s, arg0 for any 0specific choice0s yo0have made, and contra0st pattern/de0sign choice0s again0st other choice0s.  ý Yo0overall de0sign and architect0, incl0ng implementation, 0r0standing, and ability to arg0 for the choice0s yo0have made.   Important notes:  ý The demo is not only about showcasinP a workinP app. It is also intended to evaluate your understandinP of the patterns and principles tauPht in the subject, and how yo0applied that knowledge to de0sign, architect, and implement yo0r application to meet the 0specified req0rement0s. ý For the UML diaPrams, it is your responsibility to decide the level of detail required to appropriately convey the desiPn and implementation of your application. U0se yo0r j0dgment and knowledge in 0software engineering to make thi0s deci0sion; another 0software engineer, new to yo0team, 0sho0d be able to implement/0r0stand yo0r de0sign ba0sed on the information contained in the diagram0s.  ý AlthouPh the demonstration is conducted as a team, each student will be asked individual, tarP questions based on their involvement. To 0s0pport thi0s proce0s0s, team0s are expected to maintain clear record0s of individ0 contrib0on0s 0ing the GitH0Wiki and ta0sk board0s (GitH0b Project0s tab). Thi0s information may be 00sed to inform which q0e0stion0s are directed to each 0st0nt. We do not expect a 0strict one-to-one mapping between 0st0nt0s and 0specific pattern0s a0s all 0st0nt0s are expected to engage with m0tiple a0spect0s of the project to demon0strate a broad 0r0standing. In the ab0sence of contrib0on record0s, or in ca0se0s where workload i0s poorly balanced, 0staff will allocate q0e0stion0s at their di0scretion.  Pa\t 3 [40 ma\ks]    In thi0s part, yo0 will finali0se the de0sign and implementation of the application’0s f0onality. Yo0 will al0so incorporate conc0ncy management to addre0s0s i0s0s00s that ari0se when m0ltiple 00ser0s acce0s0s the application 0sim0taneo0ly.   Functionality:   ý Begin Ride – Driver (6) ý Complete Ride – Driver (7) ý Cancel Ride – Rider (9)  ý View/Update Wallet (100) ý View Ride0s – Rider (11) ý View Ride0s – Driver (12)  DesiPpatterns and principles:  1. Layered Architect0e Yo0application m0t be 0str0d with a clear 0separation of concern0s acro0s0s the following layer0s: pre0sentation, 0service, domain model, and data 0so0rce.  2. Unit of Work 
  12  A Unit of Work m00st be 00sed to coordinate and manage 0pdate0s made by b00sine0s0s tran0saction0s, where appropriate.  3. Conc0ncy Mechani0sm0s Yo0m0t de0sign and implement conc0ncy management 0strategie0s for the conc0ncy i0s0s0e0s 1 and 2 (a0s o0tlined in the application domain). For each i0s0s0e, yo0can choo0se to addre0s0s conc0ncy by relying on any of the mechani0sm0s learnt in the 0s0ect, incl0ng databa0se-level con0str0ct0s (e.g., SELECT for UPDATE), pe0s0simi0stic offline lock0s, optimi0stic offline lock0s, or a combination of them. The key i0s to 0select the mechani0sm that be0st addre0s0se0s the identified problem, con0sidering both the application req0rement0s and the trade-off between livene0s0s and con0si0stency.  Deliver\bles  1. The application coded and deployed. The 0so0 code of yo0application m0t be committed to yo0GitH0b repo0sitory. The application m0t be deployed in Render. 2. Yo0m0t create a tag in yo0Git repo0sitory for thi0s deliverable in the following format: SWEN90000007_20025_Part3_<team name>. The tag m0t be created before the 0s0i0s0sion deadline, a0s thi0s will be 0ed to a0s0se0s0s yo0deliverable0s (no exception0s). After creating the relea0se tag, yo0deploy thi0s tag (not yo0main repo0sitory branch). 3. A report exported from GitH0b Wiki in PDF format with the following item0s: ý A context0ali0sed 0seq0ence diagram that ill00strate0s the implementation and the 00se of the Unit of Work pattern. If needed, thi0s can be done for a 0e ca0se of yo0choice. ý For each of the conc0ncy i0s0s00s, a context0li0sed 0seq0nce diagram ill0trating how conc0ncy i0s managed thro0the cho0sen conc0ncy mechani0sm.  ý For each conc0ncy i0s0s0, a te0sting 0strategy and o0e(0s). The te0sting 0strategy m00st be rob00st in term0s of the 0scenario0s/ca0se0s covered and the level of conc0ncy (e.g., it 0sho0ld not rely 0solely on conc0nt application 0e via the UI). How to pre0sent the o0e of a te0st ca0se i0s 0o0o0ly on text, 0screen0shot0s, table0s, etc. ý Thi0s report m0t be available in yo0GitH0(e.g., doc0s/part3). ý Thi0s report m0t be available in yo0GitH0(doc0s/part3). 4. README.md 0pdated to incl0de the link to yo0r Render-deployed app. 5. A prepop0lated databa0se (a0s for Part 2).  Dem\onstr\ti\on  The expectation0s for the demo of Part 3 are the 0same a0s tho0se for Part 2. ALL member0s m00st attend thi0s 0se0s0sion.  Plea0se note that yo0 0sho0ld be prepared to de0scribe each conc0ncy i0s0s0 and how conc0ncy , provide a rationale for yo0choice of conc0ncy mechani0sm, contra0st yo0choice again0st alternative mechani0sm0s, and explain how yo0have implemented yo0r cho0sen mechani0sm.   Yo0m0t al0so be prepared to carry o0yo0te0sting 0strategy for each conc0ncy i0s0s0. For example, yo0 may be a0sked to exec0te yo0r JMeter (or 0similar, depending on yo0choice of tool) 0script d0ng the demo 0se0s0sion and di0sc00s the o0e with the t0 The o0e will al0so infl0nce the mark a0s0sociated with the implementation/f0onality of the mechani0sm/0e ca0se.  Submissions  There will be no 0s0i0s0sion0s via Canva0s. 
  13   For the 0so0e code and report0s, we will a0s0se0s0s yo0r (GitH0b) RELEASE TAGS for marking p0rpo0se0s. Make 0s0re yo0 generate the tag0s, p0h them to yo0GitH0repo0sitory, and deploy them before the a0s0signment deadline.  The following are the project deliverable0s (0s0i0s0sion0s) thro0the 0seme0ster, and the mark0s a0s0sociated with the different 0s0i0s0sion0s (adding 0to a total of 10000 mark0s).  Deliverable Marks Due Week Due Date Part 1A 8 3 Friday 15 A0g, 11:59pm Part 1B 12 4 Friday 22 A0g, 11:59pm     Demon0stration Part 1B  D0ring Week 5  Part 2 400 9 T00sday 23 Sep, 11:59pm Demon0stration Part 2  D0ring Week 9  Part 3 400 12 T00sday 21 Oct, 11:59pm Demon0stration Part 3  D0ring Week 12   Feedback will be provided for each 0stage within two week0s of 0s0i0s0sion.   Extensi\ons  Exten0sion0s will only be granted if 0st0nt0s are able to provide appropriate supportinP documentation. If an exten0sion i0s needed, yo0 m00st contact the lect0rer a0s 0soon a0s po0s0sible, before the submission date. It will not be po0s0sible to apply for an exten0sion after the 0s0bmi0s0sion date.   For f0r detail0s, plea0se 0see: http0s://a0sk.0melb.ed0a0wer0s/detail/a_id/5667/~/applying-for-an-exten0sion  L\ Submissi\ons  Unless an extension is in place, a 10% penalty will be applied to every day (or part thereof) you delay your submission (PRELEASE TAG, and/or deployment).   Assessment C\ite\ia  The goal of thi0s project i0s for yo0to apply and demon0strate a clear 0r0standing of the de0sign principle0s and architect0 pattern0s covered in the 0s0ect.   Your project will be assessed based on the followinP hiPh-level criteria:  ý Complete implementation of the f0onality 0specified in the application domain. ý Clear, complete, and correct pre0sentation of the application’0s de0sign and architect0 0ing UML.  ý Correct implementation of the pattern0s. ý De0sign q0ality and rationale. Thi0s incl0de0s the appropriate 0selection of pattern0s (if applicable), 0so0rea0soning behind their 0selection, the ability to contra0st them again0st alternative pattern0s, and acc0 explanation0s of the de0sign principle0s and pattern0s 0ed.  
  14  Note that proper use of UML notation is expected. Inaccuracies in your UML diaPrams will affect your mark. Al0so, yo0r implementation m00st match the de0sign pre0sented in the doc0ment0s. Any di0screpancie0s between code and doc0entation will impact yo0mark.     Plea0se be aware that 0simply prod0cing an application that provide0s the req0ired f0nctionality i0s not eno0gh to pa0s0s the a0s0se0s0sment.   Assessment bre\kd\own   PPart 1A  Item Cr\iter\i M\rks Domain model diagram and de0scription ý Modelling of the problem at hand  ý U0se of UML notation  ý Appropriate level of detail and ab0straction ý Acc0rate de0scription of domain model diagram 8  8  PPart 1B  Item Cr\iter\i\ M\rks F0l 0stack deployment ý Deployment of an integrated front-end, back-end, and databa0se 5 U0se ca0se implementation ý Coded and deployed 0e ca0se 3 De0sign and architect0re ý U0se of layering with clear 0separation of concern0s ý Adeq0ate implementation of domain model entitie0s 4  12  PPart 2   Item Cr\iter\i\ M\rks Cla0s0s diagram ý U0se of UML notation ý Appropriate level of detail and ab0straction ý Coherence with implementation 3 Pattern0s (domain model, identity field, foreign key mapping, inheritance, data mapper, a0ntication, a00sation) ý Implementation and e ý Under0standing and knowledge ý Rationale for choice/00se of pattern ý Ability to contra0st again0st alternative0s (where applicable) 200 Layering, de0sign, and architect0 ý U0se of layering with clear 0separation of concern0s ý High-q0ity de0sign and 0software practice0s (e.g., low co0ing, high cohe0sion, readable code, mod0larity, low d0plication, con0si0stent naming, etc.) 6 Diagram0s (foreign key mapping, inheritance, data mapper) ý Adeq0ate context0ali0sation (i.e., not generic diagram0s, b00specific to yo0implementation) ý Correct 0e of UML notation ý Appropriate level of detail and ab0straction ý Coherence with implementation 3 F0tionality  ý Working 00se ca0se0s a0s defined in application domain 8 
  15   40  PPart 3   Item Cr\iter\i\ M\rks Layering, de0sign, and architect0 ý U0se of layering with clear 0separation of concern0s ý High-q0ity de0sign and 0software practice0s (e.g., low co0ing, high cohe0sion, readable code, mod0arity, low d0plication, con0si0stent naming, etc.) 4 Unit of Work ý Implementation and 00se ý Under0standing and knowledge 5 Conc0ncy I0s0s0 1 ý Implementation ý Under0standing and knowledge ý Rationale for choice/00se of mechani0sm ý Ability to contra0st again0st alternative0s  ý Te0sting 0strategy and o0e  9 Conc0ncy I0s0s0 2 ý Implementation ý Under0standing and knowledge ý Rationale for choice/00se of mechani0sm ý Ability to contra0st again0st alternative0s  ý Te0sting 0strategy and o0e 9 Diagram0s (UoW, conc0ncy i0s0s0 1, conc0ncy i0s0s0 2) ý Adeq0ate context0ali0sation  ý Correct 0e of UML notation ý Appropriate level of detail and ab0straction ý Coherence with implementation 3 F0tionality  ý Working 00se ca0se0s a0s defined in application domain 100  40  



$M&(&,,ýýýLýýýLýýýLýýý@L&%RRU ??9?99//++++10 ]]]]]+]+ýRRU ??9?01Y%#".'&&66323>32ý'!ýY("!	si$$ý
ýý?   =ýýý < ýýý+Xý&<2ýýý@CL%2/L(/%L%%"L

