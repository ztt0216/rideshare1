@startuml Foreign_Key_Mapping_Complete

title <size:16><b>Foreign Key Mapping - Complete Overview</b></size>

package "Domain Classes" {
    class Ride {
        -long rideId
        -int pickupPostcode
        -int destinationPostcode
        -LocalDateTime requestedAt
        -Rider rider
        -Driver driver
        -RideStatus status
        -BigDecimal fare
        +getRider(): Rider
        +setRider(Rider): void
        +getDriver(): Driver
        +setDriver(Driver): void
    }

    abstract class User {
        -long userId
        -String name
        -String email
        -String password
        -Role role
        +getUserId(): long
        +setUserId(long): void
        +getName(): String
        +setName(String): void
    }

    class Rider {
        -List<Ride> rideHistory
        +getRideHistory(): List<Ride>
        +setRideHistory(List<Ride>): void
    }

    class Driver {
        -List<Ride> driveHistory
        -List<Availability> availabilitySchedule
        +getDriveHistory(): List<Ride>
        +setDriveHistory(List<Ride>): void
        +getAvailabilitySchedule(): List<Availability>
        +setAvailabilitySchedule(List<Availability>): void
    }

    class Availability {
        -DayOfWeek dayOfWeek
        -LocalTime startTime
        -LocalTime endTime
        +getDayOfWeek(): DayOfWeek
        +setDayOfWeek(DayOfWeek): void
        +getStartTime(): LocalTime
        +setStartTime(LocalTime): void
        +getEndTime(): LocalTime
        +setEndTime(LocalTime): void
    }

    enum RideStatus {
        REQUESTED
        ACCEPTED
        ENROUTE
        COMPLETED
        CANCELLED
    }

    enum DayOfWeek {
        MONDAY
        TUESDAY
        WEDNESDAY
        THURSDAY
        FRIDAY
        SATURDAY
        SUNDAY
    }
}

package "Database Tables" {
    entity "rides" {
        * id : BIGSERIAL PRIMARY KEY
        --
        * rider_id : BIGINT NOT NULL
        * driver_id : BIGINT (nullable)
        * pickup_postcode : INTEGER
        * destination_postcode : INTEGER
        * requested_at : TIMESTAMP
        * status : VARCHAR
        * fare : DECIMAL
    }

    entity "availability_windows" {
        * id : BIGSERIAL PRIMARY KEY
        --
        * driver_id : BIGINT NOT NULL
        * available_day : VARCHAR NOT NULL
        * start_time : TIME NOT NULL
        * end_time : TIME NOT NULL
        * check_result : BOOLEAN
    }

    entity "users" {
        * id : BIGSERIAL PRIMARY KEY
        --
        * name : VARCHAR NOT NULL
        * email : VARCHAR UNIQUE NOT NULL
        * password_hash : VARCHAR NOT NULL
        * role : VARCHAR NOT NULL
    }
}

' Foreign Key Relationships - FK Mapping 1: Ride to User
rides ||--|| users : rider_id (FK)
rides }o--|| users : driver_id (FK, nullable)

' Foreign Key Relationships - FK Mapping 2: Availability to Driver  
availability_windows }|--|| users : driver_id (FK)

' Domain Object Relationships
User <|-- Rider
User <|-- Driver
Ride --> Rider : "belongs to"
Ride --> Driver : "assigned to (optional)"
Driver *-- Availability : "has many"
Ride --> RideStatus : "has"
Availability --> DayOfWeek : "uses"

' Mapping Annotations
note as FK1
**Foreign Key Mapping 1: Ride ↔ User**
• rides.rider_id → users.id (NOT NULL)
• rides.driver_id → users.id (NULLABLE)
• Domain: Ride contains Rider/Driver objects
• Database: rides table stores user IDs
end note

note as FK2
**Foreign Key Mapping 2: Availability ↔ Driver**
• availability_windows.driver_id → users.id
• Domain: Driver contains List<Availability>
• Database: availability_windows links to users
end note

FK1 .. rides
FK2 .. availability_windows

@enduml
